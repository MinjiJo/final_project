<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Reserves">

	<select id="getReivewList" parameterType="map"
		resultType="reviewinfo">
		select *
		from (select rownum rnum, reviewInfo.*
		from (select
		r.review_code, r.room_code, r.content, r.review_date,
		r.mem_key,
		m.name, m.profile
		from review r, member m
		where
		r.mem_key=m.key
		and
		r.room_code=#{room_code}
		order by r.review_date)
		reviewInfo )
		where rnum
		&gt;= #{start} and rnum &lt;= #{end}
	</select>

	<select id="getReviewCount" parameterType="int" resultType="int">
		select count(*) from review
		where room_code=#{room_code}
	</select>


	<insert id="insertReserve" parameterType="reserve">
		<selectKey resultType="int" order="BEFORE"
			keyProperty="r_code">
			select nvl(max(r_code),1000)+1 from reserve
		</selectKey>
		insert into reserve
		values(#{r_code},#{mem_key},#{room_code},#{reserve_date},#{start_time},#{end_time},
		#{total_cost},#{require},#{status},#{extra_num},#{reserver_name},#{reserver_phone},#{reserver_email},sysdate)
	</insert>

	<select id="getMaxR_code" resultType="int">
		select max(r_code) from
		reserve
	</select>

	<select id="getReserveDetail" resultType="reserve"
		parameterType="int">
		select r.* , room.ROOM_NAME
		from reserve r, room
		where
		r.r_code = #{r_code}
		and r.room_code=room.room_code
	</select>

	<insert id="insertFood_reserve" parameterType="food_reserve">
		insert into
		food_reserve
		values(#{r_code},#{food_code},#{count},#{food_total_cost})
	</insert>

	<select id="getFood_reservelist" parameterType="int"
		resultType="food_reserve">
		select fr.*, food.food_name from food_reserve fr,food
		where
		r_code=#{r_code}
		and fr.food_code=food.food_code
	</select>

	<!-- 나의 후기 검색관련 -->
	<select id="getSearchList" parameterType="map"
		resultType="review">
		select *
		from (select rownum rnum, b.*
		from (select
		rv.room_code, re.r_code, ro.room_name, re.reserve_date, re.start_time,
		re.end_time,rv.review_code, rv.review_date, rv.content,go.file_name
		from room ro, reserve re, review rv, gallery go
		where
		ro.room_code=re.room_code and re.r_code=rv.r_code and go.room_code
		=re.room_code and go.gallery_num=1 and re.mem_key=#{key} order by
		rv.r_code desc ) b)
		where rnum &gt;= #{start} and rnum &lt;= #{end}
	</select>
	<select id="searchcount" parameterType="int" resultType="int">
		select
		count(*)
		from review where mem_key=#{key}

	</select>
	<!-- 후기 삭제 -->
	<delete id="deletereview" parameterType="int">
		delete from review
		where
		review_code=#{review_code}
	</delete>
	<!-- 후기 상세 내용 -->
	<select id="reviewDetail" parameterType="int"
		resultType="review">
		select rv.content, rv.review_code, rv.room_code,
		ro.room_name from review rv
		join room ro on ro.room_code=rv.room_code
		where rv.review_code=#{num}
	</select>
	<!-- 후기 수정 -->
	<update id="updateReview" parameterType="map">
		update review set
		content = #{contents} where review_code=#{review_code}
	</update>

	<!--날짜별 예약된 시간 불러오기 -->
	<select id="getReserve_timelist" parameterType="map"
		resultType="reserve">
		select start_time ,end_time
		from reserve
		where reserve_date =
		#{search_date}
		and room_code = #{room_code}
		and status=1
	</select>

	<!-- 예약 취소하기 -->
	<update id="reserve_cancel" parameterType="int">
		update reserve
		set
		status=0
		where r_code=#{r_code}
	</update>
	<!-- 어드민 예약 리스트 -->

	<select id="getSearchList2" parameterType="map"
		resultType="reserve">
		select * from
		(select rownum rnum, c.* from (select *
		from (select ro.room_name, rv.* from reserve rv, room ro where
		rv.room_code=ro.room_code
		<if test="search_field!=null">
			and
			<choose>
				<when test="search_field=='r_code'">r_code</when>
				<when test="search_field=='room_name'">room_name</when>
				<when test="search_field=='reserver_name'">reserver_name</when>
				<when test="search_field=='reserver_phone'">reserver_phone</when>
				<when test="search_field=='reserver_email'">reserver_email</when>
			</choose>
			like #{search_word}
		</if>
		order by rv.r_code desc)b left outer join food_reserve fd on
		fd.r_code=b.r_code)c)
		where rnum &gt;=#{start} and rnum &lt;=#{end}
	</select>

	<select id="searchcount2" parameterType="map" resultType="int">
		select count(*) from
		(select rownum rnum, c.* from (select *
		from (select ro.room_name, rv.* from reserve rv, room ro where
		rv.room_code=ro.room_code
		<if test="search_field!=null">
			and
			<choose>
				<when test="search_field=='r_code'">r_code</when>
				<when test="search_field=='room_name'">room_name</when>
				<when test="search_field=='reserver_name'">reserver_name</when>
				<when test="search_field=='reserver_phone'">reserver_phone</when>
				<when test="search_field=='reserver_email'">reserver_email</when>
			</choose>
			like #{search_word}
		</if>
		order by rv.r_code desc)b left outer join food_reserve fd on
		fd.r_code=b.r_code)c)
	</select>



	<!-- 선아 : 예약 내역 개수 불러오기 -->
	<select id="reserveListCount" parameterType="int"
		resultType="int">
		select count(*) from reserve where mem_key = #{mem_key}
	</select>

	<select id="reservelist" parameterType="java.util.Map"
		resultType="reserve">
		select * from
		(select rownum rnum, reserve.r_code,
		reserve.mem_key, reserve.room_code,
		reserve.reserve_date,
		reserve.start_time, reserve.end_time,
		reserve.total_cost,
		reserve.require,
		reserve.status, reserve.extra_num,
		reserve.reserver_name, reserve.reserver_phone,
		reserve.reserver_email,
		reserve.pay_date
		from reserve, member
		where reserve.mem_key =
		member.key)
		where rnum &gt;= #{start} and rnum &lt;= #{end}
		order by
		reserve_date
	</select>

	<select id="reserveRoomPicture" parameterType="int"
		resultType="String">
		select * from (
		select file_name from
		(select * from member
		m, reserve r, gallery g
		where m.key = r.mem_key and r.room_code =
		g.room_code)
		where mem_key =
		#{mem_key})
	</select>
</mapper>

