<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Reserves">

	<select id="getReivewList" parameterType="map"
		resultType="reviewinfo">
		select *
		from (select rownum rnum, reviewInfo.*
		from (select
		r.review_code, r.room_code, r.content, r.review_date,
		r.mem_key,
		m.name, m.profile
		from review r, member m
		where
		r.mem_key=m.key
		and
		r.room_code=#{room_code}
		order by r.review_date)
		reviewInfo )
		where rnum
		&gt;= #{start} and rnum &lt;= #{end}
	</select>

	<select id="getReviewCount" parameterType="int" resultType="int">
		select count(*) from review
		where room_code=#{room_code}
	</select>


	<insert id="insertReserve" parameterType="reserve">
		<selectKey resultType="int" order="BEFORE"
			keyProperty="r_code">
			select nvl(max(r_code),1000)+1 from reserve
		</selectKey>
		insert into reserve
		values(#{r_code},#{mem_key},#{room_code},#{reserve_date},#{start_time},#{end_time},
		#{total_cost},#{require},#{status},#{extra_num},#{reserver_name},#{reserver_phone},#{reserver_email},sysdate)
	</insert>

	<select id="getMaxR_code" resultType="int">
		select max(r_code) from
		reserve
	</select>

	<select id="getReserveDetail" resultType="reserve"
		parameterType="int">
		select r.* , room.ROOM_NAME
		from reserve r, room
		where
		r.r_code = #{r_code}
		and r.room_code=room.room_code
	</select>

	<insert id="insertFood_reserve" parameterType="food_reserve">
		insert into
		food_reserve
		values(#{r_code},#{food_code},#{count},#{food_total_cost})
	</insert>

	<select id="getFood_reservelist" parameterType="int"
		resultType="food_reserve">
		select fr.*, food.food_name from food_reserve fr,food
		where
		r_code=#{r_code}
		and fr.food_code=food.food_code
	</select>

	<!-- 나의 후기 검색관련 -->
	<select id="getSearchList" parameterType="map"
		resultType="review">
		select *
		from (select rownum rnum, b.*
		from (select
		rv.room_code, re.r_code, ro.room_name, re.reserve_date, re.start_time,
		re.end_time,rv.review_code, rv.review_date, rv.content,go.file_name
		from room ro, reserve re, review rv, gallery go
		where
		ro.room_code=re.room_code and re.r_code=rv.r_code and go.room_code
		=re.room_code and go.gallery_num=1 and re.mem_key=#{key} order by
		rv.r_code desc ) b)
		where rnum &gt;= #{start} and rnum &lt;= #{end}
	</select>
	<select id="searchcount" parameterType="int" resultType="int">
		select
		count(*)
		from review where mem_key=#{key}

	</select>
	<!-- 후기 삭제 -->
	<delete id="deletereview" parameterType="int">
		delete from review
		where
		review_code=#{review_code}
	</delete>
	<!-- 후기 상세 내용 -->
	<select id="reviewDetail" parameterType="int"
		resultType="review">
		select rv.content, rv.review_code, rv.room_code,
		ro.room_name from review rv
		join room ro on ro.room_code=rv.room_code
		where rv.review_code=#{num}
	</select>
	<!-- 후기 수정 -->
	<update id="updateReview" parameterType="map">
		update review set
		content = #{contents} where review_code=#{review_code}
	</update>

	<!--날짜별 예약된 시간 불러오기 -->
	<select id="getReserve_timelist" parameterType="map"
		resultType="reserve">
		select start_time ,end_time
		from reserve
		where reserve_date =
		#{search_date}
		and room_code = #{room_code}
		and status=1
	</select>

	<!-- 예약 취소하기 -->
	<update id="reserve_cancel" parameterType="int">
		update reserve
		set
		status=0
		where r_code=#{r_code}
	</update>
	<!-- 어드민 예약 리스트 -->

	<select id="getSearchList2" parameterType="map"
		resultType="reserve">
select *
		from (select rownum rnum, b.*
		from (select ro.room_name, rv.* from reserve rv, room ro where rv.room_code=ro.room_code
		<if test="search_field!=null">
			and
			<choose>
				<when test="search_field=='r_code'">r_code</when>
				<when test="search_field=='room_name'">room_name</when>
				<when test="search_field=='reserver_name'">reserver_name</when>
				<when test="search_field=='reserver_phone'">reserver_phone</when>
				<when test="search_field=='reserver_email'">reserver_email</when>
			</choose>
			like #{search_word}
		</if>
		order by rv.r_code desc) b)
		where rnum &gt;=#{start} and rnum &lt;=#{end}
	</select>

	<select id="searchcount2" parameterType="map" resultType="int">
		select count(*) from
		(select rownum rnum, b.* from (select ro.room_name, rv.* from reserve rv, room ro where rv.room_code=ro.room_code
		<if test="search_field!=null">
			and
			<choose>
				<when test="search_field=='r_code'">r_code</when>
				<when test="search_field=='room_name'">room_name</when>
				<when test="search_field=='reserver_name'">reserver_name</when>
				<when test="search_field=='reserver_phone'">reserver_phone</when>
				<when test="search_field=='reserver_email'">reserver_email</when>
			</choose>
			like #{search_word}
		</if>
		order by rv.r_code desc) b)
	</select>

	<!-- 푸드 예약 정보 -->
	<select id="getFoodReserveDetail" parameterType="int" resultType="food_reserve">
	select * from food_reserve where r_code=#{r_code}
	</select>

	<!-- 예약정보(룸네임 포함) -->
	<select id="getDetail"  parameterType="int" resultType="reserve">
	select * from reserve rv, room ro where ro.room_code=rv.room_code and rv.r_code=#{r_code}
	</select>
	
	<!-- 예약정보 업데이트 -->
	<update id="updateReserve" parameterType="reserve" >
	update reserve
	set 
	start_time=#{start_time},
	end_time=#{end_time},
	total_cost=#{total_cost},
	extra_num=#{extra_num},
	reserver_name=#{reserver_name},
	reserver_phone=#{reserver_phone},
	reserver_email=#{reserver_email},
	require=#{require}
	where r_code=#{r_code}
	</update>


	<!-- 선아 : 예약 내역 개수 불러오기 -->
	<select id="reserveListCount" parameterType="int"
		resultType="int">
		select count(*) from reserve where mem_key = #{mem_key}
	</select>

	<select id="reservelist" parameterType="java.util.Map"
		resultType="reserve">
		select * from
			(select rownum rnum, re.r_code, re.mem_key, re.room_code, re.reserve_date, re.start_time, 
				re.end_time, re.total_cost, re.require, re.status, re.extra_num, 
				re.reserver_name, re.reserver_phone, re.reserver_email, re.pay_date, go.file_name, ro.room_name
   			 from reserve re, member me, gallery go, room ro
  			 where re.mem_key = me.key 
  			 and re.room_code = go.room_code
  			 and ro.room_code = re.room_code
  			 and go.gallery_num = 1
  			 and re.mem_key = #{mem_key})
 		where rnum &gt;= #{start} and rnum &lt;= #{end}
      	order by reserve_date
	</select>
	
	<insert id = "registerReview" parameterType = "java.util.Map">
		insert into review 
		values ((select nvl(max(review_code), 0)+1 from review), #{room_code}, #{content}, TO_DATE(#{review_date}, 'YYYY-MM-DD hh24:mi:ss'), #{mem_key}, #{r_code})
	</insert>
	
	<update id = "rCodeChange" parameterType = "int">
		update reserve set status = 2 where r_code = #{r_code}
	</update>


</mapper>

